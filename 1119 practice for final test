#include <MsTimer2.h>
#include <LSM303.h>

#define Test_pin 42
#define A0pin A0
#define SIpin 23
#define CLkpin 22
#define NPIXELS 128

#define ENA 8
#define IN1 9
#define IN2 10
#define IN3 11
#define IN4 12
#define ENB 7

#define base_speed 80
#define Grid_Size 0.4

float target_heading_angle = 90;
float Yaw_kp = 0.21;
float Yaw_kd = 0.5;
float Yaw_error = 0.0;
float Yaw_error_old = 0.0;
float pid_out;
float target_yaw;

LSM303 compass;

byte Pixel[NPIXELS];
byte Threshold_Data[NPIXELS];

int LineSensor_Data[NPIXELS];
int LineSensor_Data_Adaption[NPIXELS];
int MAX_LineSensor_Data[NPIXELS];
int MIN_LineSensor_Data[NPIXELS];
int flag_line_adapation;

long Encoder_A_pulse = 0;
long Encoder_B_pulse = 0;
long Prev_Encoder_A = 0;
long Prev_Encoder_B = 0;

const int IMG_WIDTH_HALF = 64;
const int BASE_SPEED = 100;
const float kp = 4.7;
const float kd = 0.3;
float error_old = 0.0;

#define FASTADC 1
#define cbi(sfr, bit) (_SFR_BYTE(sfr) &= ~_BV(bit))
#define sbi(sfr, bit) (_SFR_BYTE(sfr) |= _BV(bit))

float robot_distance = 0.0;
float wheel_circumference = 20.0;
int pulses_per_rev = 360;

int mission_flag = 0;
int function_flag = 0;

struct Waypoint {
  double distance;
  double heading_angle;
};

Waypoint waypoints[12];
int waypoint_no = 0;

void setup()
{
  reset_encoder();
  reset_IMU();
  MsTimer2::set(20, MsTimer2_ISR);
  MsTimer2::start();

  for (int i = 0; i < NPIXELS; i++)
  {
    LineSensor_Data[i] = 0;
    LineSensor_Data_Adaption[i] = 0;
    MAX_LineSensor_Data[i] = 1023;
    MIN_LineSensor_Data[i] = 0;
  }

  pinMode(SIpin, OUTPUT);
  pinMode(CLkpin, OUTPUT);
  pinMode(A0pin, INPUT);

  digitalWrite(SIpin, LOW);
  digitalWrite(CLkpin, LOW);

#if FASTADC
  sbi(ADCSRA, ADPS2);
  cbi(ADCSRA, ADPS1);
  cbi(ADCSRA, ADPS0);
#endif

  flag_line_adapation = 0;

  pinMode(Test_pin, OUTPUT);

  Serial.begin(115200);

  waypoints[0] = {0, 0};
  waypoints[1] = {2 * Grid_Size, 0};
  waypoints[2] = {0, 90};
  waypoints[3] = {3 * Grid_Size, 0};
  waypoints[4] = {0, -90};
  waypoints[5] = {1 * Grid_Size, 0};
  waypoints[6] = {0, 0};
  waypoints[7] = {0, -90};
  waypoints[8] = {3 * Grid_Size, 0};
  waypoints[9] = {0, 90};
  waypoints[10] = {1 * Grid_Size, 0};

}


void reset_encoder()
{
  Encoder_A_pulse = 0;
  Encoder_B_pulse = 0;
  Prev_Encoder_A = 0;
  Prev_Encoder_B = 0;
}

void MsTimer2_ISR()
{
  switch (function_flag)
  {
    case 1:
      line_tracer();
      break;
    case 2:
      yaw_control();
      break;
    case 3:
    default:
      motor_control(0, 0);
      break;
  }
}

void motor_l(int speed)
{
  if (speed >= 0)
  {
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, HIGH);
    analogWrite(ENA, speed);
  }
  else
  {
    digitalWrite(IN1, HIGH);
    digitalWrite(IN2, LOW);
    analogWrite(ENA, -speed);
  }
}

void motor_r(int speed)
{
  if (speed >= 0)
  {
    digitalWrite(IN3, LOW);
    digitalWrite(IN4, HIGH);
    analogWrite(ENB, speed);
  }
  else
  {
    digitalWrite(IN3, HIGH);
    digitalWrite(IN4, LOW);
    analogWrite(ENB, -speed);
  }
}

void motor_control(int left_motor_speed, int right_motor_speed)
{
  motor_l(left_motor_speed);
  motor_r(right_motor_speed);
}

void reset_IMU() {
  compass.init();
  delay(100);
  compass.read();
  Serial.println("IMU has been reset.");
}

void read_line_camera(void)
{
  int i;
  digitalWrite(CLkpin, LOW);
  digitalWrite(SIpin, HIGH);
  digitalWrite(CLkpin, HIGH);
  digitalWrite(SIpin, LOW);
  delayMicroseconds(1);

  for (i = 0; i < NPIXELS; i++)
  {
    Pixel[i] = analogRead(A0pin) / 4;
    digitalWrite(CLkpin, LOW);
    delayMicroseconds(1);
    digitalWrite(CLkpin, HIGH);
  }
  digitalWrite(CLkpin, LOW);
}

void update_robot_distance()
{
  long delta_A = Encoder_A_pulse - Prev_Encoder_A;
  long delta_B = Encoder_B_pulse - Prev_Encoder_B;

  float avg_pulse = (delta_A + delta_B) / 2.0;
  robot_distance += (avg_pulse / pulses_per_rev) * wheel_circumference;

  Serial.print("Distance: ");
  Serial.println(robot_distance);

  Prev_Encoder_A = Encoder_A_pulse;
  Prev_Encoder_B = Encoder_B_pulse;
}


void yaw_control()
{
  float Yaw_error_d;
  int l_motor_speed;
  int r_motor_speed;

  compass.read();
  float heading_angle = compass.heading();

  Yaw_error = target_yaw - heading_angle;
  if (Yaw_error > 180) Yaw_error -= 360;
  else if (Yaw_error < -180) Yaw_error += 360;

  Yaw_error_d = Yaw_error - Yaw_error_old;
  pid_out = Yaw_kp * Yaw_error + Yaw_kd * Yaw_error_d;
  Yaw_error_old = Yaw_error;

  l_motor_speed = base_speed + (int)pid_out;
  r_motor_speed = base_speed - (int)pid_out;

  motor_control(l_motor_speed, r_motor_speed);
}

void threshold_line_image(int threshold_value)
{
  digitalWrite(Test_pin, HIGH);
  for (int i = 0; i < NPIXELS; i++)
  {
    if (Pixel[i] >= threshold_value)
    {
      Threshold_Data[i] = 255;
    } else {
      Threshold_Data[i] = 0;
    }
  }
  digitalWrite(Test_pin, LOW);
}

double line_COM(void)
{
  double COM = 0.0;
  double mass_sum = 0.0;

  for (int i = 0; i < NPIXELS; i++)
  {
    mass_sum += Threshold_Data[i];
    COM += Threshold_Data[i] * i;
  }

  if (mass_sum == 0)
  {
    return -1;
  }

  COM = COM / mass_sum;
  return COM;
}

void line_control(int line_center)
{
  int error = line_center - IMG_WIDTH_HALF;
  int derivative = error - error_old;
  float output = kp * error + KD * derivative;
  int speed_difference = int(output);

  int right_speed = BASE_SPEED - speed_difference;
  int left_speed  = BASE_SPEED + speed_difference;

  left_speed = constrain(left_speed, 0, 100);
  right_speed = constrain(right_speed, 0, 100);

  motor_control(left_speed, right_speed);
  error_old = error;
}

void line_tracer()
{
  double cx = 64;
  read_line_camera();
  threshold_line_image(150);
  cx = line_COM();
  line_control(cx);
}

void loop()
{
  switch (mission_flag)
  {
    case 0:
      motor_control(0, 0);
      delay(500);
      reset_encoder();
      robot_distance = 0.0;
      reset_IMU();
      function_flag = 1;
      mission_flag = 1;
      break;

    case 1:
      if (robot_distance >= waypoints[waypoint_no].distance)
      {
        function_flag = 3;
        delay(500);
        reset_IMU();
        target_yaw =  waypoints[waypoint_no].heading_angle + compass.heading();
        function_flag = 2;
        mission_flag = 2;
      }
      else
      {
        line_tracer();
      }
      break;

    case 2:
      yaw_control();
      if (abs(Yaw_error) < 3)
      {
        function_flag = 3;
        delay(500);
        reset_encoder();
        mission_flag = 3;
      }
      break;

    case 3:
      motor_control(0, 0);
      delay(500);
      reset_encoder();
      robot_distance = 0.0;
      reset_IMU();

      waypoint_no++;
      if (waypoint_no < sizeof(waypoints) / sizeof(waypoints[0]))
      {
        mission_flag = 0;
      }
      else
      {
        mission_flag = 4;
      }
      break;

    case 4:
      motor_control(0, 0);
      break;
  }
}
